Annual_income_nonsafetynet_increase = if_else(hours_worked*subsidy_wage - INCWAGE<0,0,hours_worked*subsidy_wage - INCWAGE),
total_income_increase = Annual_income_increase + Annual_income_nonsafetynet_increase)
Impacted_IDs$Annual_income_increase[Impacted_IDs$dependent_income==1] <- 0
Impacted_IDs$Annual_income_nonsafetynet_increase[Impacted_IDs$dependent_income==0] <- 0
# It is possible that households will have multiple eligible people, so aggregate new earnings at the household level
household_income_increase <- Impacted_IDs %>%
group_by(SERIAL) %>%
summarise(income_increase = sum(Annual_income_increase),
income_increase_notaxtransfer = sum(Annual_income_nonsafetynet_increase))
CPS_data <- CPS_data %>% left_join(household_income_increase) # Merge the subsidy info into the full CPS data
CPS_data$income_increase[is.na(CPS_data$income_increase)] <- 0  # for anyone who was not placed in the eligible cat - set the subsidy income increase to $0
CPS_data$income_increase_notaxtransfer[is.na(CPS_data$income_increase_notaxtransfer)] <- 0  # for anyone who was not placed in the eligible cat - set the subsidy income increase to $0
household_earning_weight <- CPS_data %>%
group_by(SERIAL) %>%
summarise(household_earnwt = sum(EARNWT))
CPS_data <- CPS_data %>% left_join(household_earning_weight)
#################
### 2) convert CPS data to a naming scheme recognized by the PRD
# The PRD will estiamte social safety net eligability at the household level
# Calculate all necessary information for the household
#################
# Count the number of dependents in the household
household_demo <- CPS_data %>%
mutate(dependent = if_else(FAMREL == 3 & AGE<19 & !is.na(AGE),1,0)) %>%
group_by(SERIAL) %>%
summarise(depx = sum(dependent)) %>%
ungroup() %>%
mutate(hasdependent = if_else(depx>0,1,0)) %>%
distinct()
# Define the ages of household members
household_age <- CPS_data %>%
group_by(SERIAL) %>%
summarise(agePerson1 = as.numeric(nth(AGE,1, order_by = AGE*-1)),
agePerson2 = as.numeric(nth(AGE,2, order_by = AGE*-1)),
agePerson3 = as.numeric(nth(AGE,3, order_by = AGE*-1)),
agePerson4 = as.numeric(nth(AGE,4, order_by = AGE*-1)),
agePerson5 = as.numeric(nth(AGE,5, order_by = AGE*-1)),
agePerson6 = as.numeric(nth(AGE,6, order_by = AGE*-1)),
agePerson7 = as.numeric(nth(AGE,7, order_by = AGE*-1)),
agePerson8 = as.numeric(nth(AGE,8, order_by = AGE*-1)),
agePerson9 = as.numeric(nth(AGE,9, order_by = AGE*-1)),
agePerson10 = as.numeric(nth(AGE,10, order_by = AGE*-1)),
agePerson11 = as.numeric(nth(AGE,11, order_by = AGE*-1)),
agePerson12 = as.numeric(nth(AGE,12, order_by = AGE*-1)))  %>%
ungroup() %>%
distinct()
# Ben Glasner Benefits Calculator----
# This program:
# 1) reads-in IPUMS CPS ASEC data
# 2) convert it to a naming scheme recognized by PRD
# 3) defines two distinct pre/post wage subsidy incomes
# 4) runs Benefits Calculator for both the pre and post treatment incomes
# 5) estimate total cost of wage subsidy program as the change in qualified social safety net $s
#################
### Library   ###
#################
library(dplyr)
library(ipumsr)
library(spatstat)
set.seed(42)
options(scipen=100000)
#################
### Set paths ###
#################
if(Sys.info()[["user"]]=="bglasner"){
# Root folder
path_project <- "C:/Users/bglasner/Dropbox/GitHub/policy-rules-database"
}
if(Sys.info()[["user"]]=="bngla"){
# Root folder
path_project <- "C:/Users/bngla/Dropbox/GitHub/policy-rules-database"
}
if(Sys.info()[["user"]]=="Benjamin Glasner"){
# Root folder
path_project <- "C:/Users/Benjamin Glasner/Dropbox/GitHub/policy-rules-database"
}
# Path to saved cohort data
path_cps <- paste0(path_project,"/CPS")
# #Ellie's paths
# path_cps<- "C:/Users/ellie/Dropbox/Consulting_Other/Ben"
# path_project <- "C:/Users/ellie/Dropbox/WorkForceDevProj/Documentation/Benefits & Expenses Database/programs"
setwd(path_project)
## Load expense parameters ----
load(paste0(path_project,"/prd_parameters/expenses.rdata"))
## Load benfits parameters ----
load(paste0(path_project,"/prd_parameters/benefit.parameters.rdata"))
## Load eligible tables of SMI,FPL / crosswalks ----
load(paste0(path_project,"/prd_parameters/tables.rdata"))
## Load default parameters for the PRD----
load(paste0(path_project,"/prd_parameters/parameters.defaults.rdata"))
## Call all the functions for the PRD ----
source(paste0(path_project,"/libraries.R"), local=TRUE) # Load required packages
source(paste0(path_project,"/functions/benefits_functions.R"), local=TRUE) # Benefits calculations
source(paste0(path_project,"/functions/expense_functions.R"), local=TRUE) # Expenses calculations
source(paste0(path_project,"/functions/BenefitsCalculator_functions.R"), local=TRUE) # Benefits Calculator functions
# Create a linked Geography list ---- # Need to do this so that the geonames and values align with PRD notation
PROJECT<-"wage_subsidy"
# Load inputs YAML file
inputs <- read_yaml(paste0(path_project,"/projects/",PROJECT,".yml"))
data<-function.createData(inputs)
geo_data <- data %>%
select(stateName:MSA,AKorHI,countyortownName,stateAbbrev) %>%
group_by(stateName) %>%
arrange(GEOID) %>%
filter(row_number()==1) %>%
ungroup()
## 1. Settings----
# Global settings
k_ftorpt <- inputs$k_ftorpt
schoolagesummercare <- inputs$schoolagesummercare
headstart_ftorpt <- inputs$headstart_ftorpt
preK_ftorpt <- inputs$preK_ftorpt
contelig.headstart <- inputs$contelig.headstart
contelig.earlyheadstart <- inputs$contelig.earlyheadstart
contelig.ccdf <- inputs$contelig.ccdf
USEALICE <- inputs$USEALICE
budget.ALICE <-inputs$budget.ALICE
# Transfer programs switches
APPLY_CHILDCARE<-inputs$APPLY_CHILDCARE #Childcare block - Head Start and CCDF
APPLY_CCDF<-inputs$APPLY_CCDF
APPLY_HEADSTART<-inputs$APPLY_HEADSTART
APPLY_PREK<-inputs$APPLY_PREK
APPLY_LIHEAP<-inputs$APPLY_LIHEAP
APPLY_HEALTHCARE<-inputs$APPLY_HEALTHCARE
APPLY_MEDICAID_ADULT<-inputs$APPLY_MEDICAID_ADULT
APPLY_MEDICAID_CHILD<-inputs$APPLY_MEDICAID_CHILD
APPLY_ACA<-inputs$APPLY_ACA
APPLY_SECTION8<-inputs$APPLY_SECTION8
APPLY_RAP<-inputs$APPLY_RAP
APPLY_FRSP<-inputs$APPLY_FRSP
APPLY_SNAP<-inputs$APPLY_SNAP
APPLY_SLP<-inputs$APPLY_SLP
APPLY_WIC<-inputs$APPLY_WIC
APPLY_EITC<-inputs$APPLY_EITC
APPLY_TAXES<-inputs$APPLY_TAXES
APPLY_CTC<-inputs$APPLY_CTC
APPLY_CDCTC<-inputs$APPLY_CDCTC
APPLY_FATES<-inputs$APPLY_FATES
APPLY_TANF<-inputs$APPLY_TANF
APPLY_SSI<-inputs$APPLY_SSI
APPLY_SSDI<-inputs$APPLY_SSDI
#################
### 1)  reads-in IPUMS CPS ASEC data
#################
# These are the IPUMS data sets for the March 2022 CPS ASEC
ddi <- read_ipums_ddi(paste0(path_cps,"/cps_00011.xml"))
# ddi <- read_ipums_ddi(paste0(path_cps,"/cps_00009.xml")) # this is the 2019 ASEC for testing
CPS_data <- read_ipums_micro(ddi)
# Using the March 2022 CPS ASEC - What is the median hourly wage for uncensored workers who report hourly work
median_hourly_wage <- weighted.median(CPS_data$HOURWAGE[CPS_data$PAIDHOUR == 2 & CPS_data$HOURWAGE<900],
w = CPS_data$EARNWT[CPS_data$PAIDHOUR == 2 & CPS_data$HOURWAGE<900],
na.rm = TRUE)
median_comp_percent <- 3/4 # How much of the difference between reported wage and the target wage will the gov. cover?
median_cutoff_percent <- 0.65 # What share of the median wage are we using to set the target wage?
#ET: you might consider 85% instead (85% is the max cutoff for eligibility the CCDF program, so someone somewhere thought that was a good proxy for having enough income to afford childcare. Also, I've done some work in the past comparing 85% SMI with cost of living in an area and it's a pretty good estimate of how much you need to pay for living expenses. I can send you the paper with the chart if curious
target_wage <- median_cutoff_percent*median_hourly_wage # What is the value of the target wage?
state_median <- CPS_data %>%
filter(PAIDHOUR == 2 & HOURWAGE<900) %>%
group_by(STATEFIP) %>%
summarise(median_hourly_wage =  weighted.median(HOURWAGE,
w = EARNWT,
na.rm = TRUE))
#################
### 2) Define who is eligable for the subsidy and how much they get
#################
# merge in the state minimum wage laws
CPS_data <- CPS_data %>%
mutate(stateFIPS = as.numeric(STATEFIP),
Year = 2023) %>%
left_join(geo_data) %>%
left_join(table.minWage)
# Define who will receive the wage subsidy and what the anticipated policy benefit will be
Impacted_IDs <- CPS_data  %>%
filter(HOURWAGE<=target_wage & PAIDHOUR == 2) %>% # Select respondents who are paid hourly and have a wage less than the target wage
select(SERIAL,YEAR,MONTH,CPSID,STATEFIP,
ASECWT,EARNWT,
AGE,RACE,FAMSIZE,NCHILD,SEX,
INCWAGE,HOURWAGE,minwage.old,UHRSWORKT,
RELATE) %>% # keep only the variables that are needed
rename("famsize" = "FAMSIZE",
"numkids"  = "NCHILD") %>%
mutate(dependent_income = if_else(RELATE >300,1,0),
Min_applied_wage = if_else(HOURWAGE>minwage.old,HOURWAGE,minwage.old), # Assuming no loss in hours, we raise everyone's hourly wage to the states minimum wage, if they are below the minimum wage. Note- we use 2023 rules, but data is from 2022 - so minwage.old
subsidy_eligable = if_else(Min_applied_wage<target_wage,1,0), # If a persons wage (after adjusting for the state minimum wage) is less than the target wage, they are eligible for the policy
wage_increase = if_else(subsidy_eligable == 1,(target_wage - Min_applied_wage)*median_comp_percent,0), # The government covers median_comp_percent of the difference between employer supplied wage and the target wage
subsidy_wage = wage_increase + Min_applied_wage, # employee received wage is the wage subsidy + employer supplied wage
hours_worked = if_else(INCWAGE/Min_applied_wage>4160, 4160,INCWAGE/Min_applied_wage), # We do not have great data for annual hours worked, so I calculate the number of hours needed to reach INCWAGE. If it is greater than 80 hours per week for 52 weeks, I assume they work 80hrs for 52 weeks as a max
#ET:  incwage may reflect combined income from all jobs. I know monthly CPS has usual hours worked per week in main job as a var
Annual_income_increase = if_else(hours_worked*subsidy_wage - INCWAGE<0,0,hours_worked*subsidy_wage - INCWAGE), # Assume no one loses income from this, define the new income as the difference between old wage income and new wage income with the subsidy
Annual_income_nonsafetynet_increase = if_else(hours_worked*subsidy_wage - INCWAGE<0,0,hours_worked*subsidy_wage - INCWAGE),
total_income_increase = Annual_income_increase + Annual_income_nonsafetynet_increase)
Impacted_IDs$Annual_income_increase[Impacted_IDs$dependent_income==1] <- 0
Impacted_IDs$Annual_income_nonsafetynet_increase[Impacted_IDs$dependent_income==0] <- 0
# It is possible that households will have multiple eligible people, so aggregate new earnings at the household level
household_income_increase <- Impacted_IDs %>%
group_by(SERIAL) %>%
summarise(income_increase = sum(Annual_income_increase),
income_increase_notaxtransfer = sum(Annual_income_nonsafetynet_increase))
CPS_data <- CPS_data %>% left_join(household_income_increase) # Merge the subsidy info into the full CPS data
CPS_data$income_increase[is.na(CPS_data$income_increase)] <- 0  # for anyone who was not placed in the eligible cat - set the subsidy income increase to $0
CPS_data$income_increase_notaxtransfer[is.na(CPS_data$income_increase_notaxtransfer)] <- 0  # for anyone who was not placed in the eligible cat - set the subsidy income increase to $0
household_earning_weight <- CPS_data %>%
group_by(SERIAL) %>%
summarise(household_earnwt = sum(EARNWT))
CPS_data <- CPS_data %>% left_join(household_earning_weight)
#################
### 2) convert CPS data to a naming scheme recognized by the PRD
# The PRD will estiamte social safety net eligability at the household level
# Calculate all necessary information for the household
#################
# Count the number of dependents in the household
household_demo <- CPS_data %>%
mutate(dependent = if_else(FAMREL == 3 & AGE<19 & !is.na(AGE),1,0)) %>%
#ET does famrel=3 reflect the person is head or has relatives in the household (thus removing the roomates?)
group_by(SERIAL) %>%
summarise(depx = sum(dependent)) %>%
ungroup() %>%
mutate(hasdependent = if_else(depx>0,1,0)) %>%
distinct()
# Define the ages of household members
household_age <- CPS_data %>%
group_by(SERIAL) %>%
summarise(agePerson1 = as.numeric(nth(AGE,1, order_by = AGE*-1)),
agePerson2 = as.numeric(nth(AGE,2, order_by = AGE*-1)),
agePerson3 = as.numeric(nth(AGE,3, order_by = AGE*-1)),
agePerson4 = as.numeric(nth(AGE,4, order_by = AGE*-1)),
agePerson5 = as.numeric(nth(AGE,5, order_by = AGE*-1)),
agePerson6 = as.numeric(nth(AGE,6, order_by = AGE*-1)),
agePerson7 = as.numeric(nth(AGE,7, order_by = AGE*-1)),
agePerson8 = as.numeric(nth(AGE,8, order_by = AGE*-1)),
agePerson9 = as.numeric(nth(AGE,9, order_by = AGE*-1)),
agePerson10 = as.numeric(nth(AGE,10, order_by = AGE*-1)),
agePerson11 = as.numeric(nth(AGE,11, order_by = AGE*-1)),
agePerson12 = as.numeric(nth(AGE,12, order_by = AGE*-1)))  %>%
ungroup() %>%
distinct()
# Define the min child age of household members
household_minchildage <- CPS_data %>%
group_by(SERIAL) %>%
summarise(ageofYoungestChild = min(AGE))  %>%
ungroup() %>%
distinct()
# Define the # of children under 13
household_numkidsunder13 <- household_age %>%
mutate(person1_sub13 = if_else(agePerson1<13,1,0),
person2_sub13 = if_else(agePerson2<13,1,0),
person3_sub13 = if_else(agePerson3<13,1,0),
person4_sub13 = if_else(agePerson4<13,1,0),
person5_sub13 = if_else(agePerson5<13,1,0),
person6_sub13 = if_else(agePerson6<13,1,0),
person7_sub13 = if_else(agePerson7<13,1,0),
person8_sub13 = if_else(agePerson8<13,1,0),
person9_sub13 = if_else(agePerson9<13,1,0),
person10_sub13 = if_else(agePerson10<13,1,0),
person11_sub13 = if_else(agePerson11<13,1,0),
person12_sub13 = if_else(agePerson12<13,1,0)) %>%
select(SERIAL,person1_sub13:person12_sub13) %>%
replace(is.na(.), 0) %>%
mutate(numkidsunder13 = person1_sub13 + person2_sub13 + person3_sub13 + person4_sub13 + person5_sub13 + person6_sub13 + person7_sub13 + person8_sub13 + person9_sub13 + person10_sub13 + person11_sub13 + person12_sub13) %>%
select(SERIAL,numkidsunder13)
# Assuming no disability status across the sample
household_disability <- CPS_data %>%
group_by(SERIAL) %>%
summarise(disability1 = 0,
disability2 = 0,
disability3 = 0,
disability4 = 0,
disability5 = 0,
disability6 = 0,
disability7 = 0,
disability8 = 0,
disability9 = 0,
disability10 = 0,
disability11 = 0,
disability12 = 0)  %>%
ungroup() %>%
distinct()
# Blindness in the household
household_blind <- CPS_data %>%
mutate(blind = if_else(DIFFEYE==2,1,0)) %>%
group_by(SERIAL) %>%
summarise(blind1 = as.numeric(nth(blind,1, order_by = AGE*-1)),
blind2 = as.numeric(nth(blind,2, order_by = AGE*-1)),
blind3 = as.numeric(nth(blind,3, order_by = AGE*-1)),
blind4 = as.numeric(nth(blind,4, order_by = AGE*-1)),
blind5 = as.numeric(nth(blind,5, order_by = AGE*-1)),
blind6 = as.numeric(nth(blind,6, order_by = AGE*-1)))  %>%
replace(is.na(.), 0) %>%
ungroup() %>%
distinct()
# Define SSDI payments - assume it is 0
household_ssdi <- CPS_data %>%
group_by(SERIAL) %>%
summarise(ssdiPIA1 = 0,
ssdiPIA2 = 0,
ssdiPIA3 = 0,
ssdiPIA4 = 0,
ssdiPIA5 = 0,
ssdiPIA6 = 0)  %>%
ungroup() %>%
distinct()
# Define SSDI payments - assume it is 0
#ET: you may have to assume everyone is a renter - I can't remember if the section 8 code checks to see if person is a owner or renter. Also, the cost database theoretically can assign a different housing costs to owners but I dont think we have created that functionality
household_ownorrent <- CPS_data %>%
filter(!is.na(OWNERSHP)) %>%
mutate(own = if_else(OWNERSHP==10,1,0)) %>%
group_by(SERIAL) %>%
summarise(own = max(own)) %>%
ungroup() %>%
mutate(ownorrent = if_else(own==1,"own","rent"))  %>%
distinct()
# Restricting the sample to those aged 16 to 65, paid hourly or unemployed
# assuming no disability, no SSI, No Cash, No Car, No Disab.work.exp,
#ET: assuming $0 assets will have implications for SNAP eligiblity (in some states) and TANF eligiblity (in most states), just something to keep in mind as you write up your results
CPS_data <- CPS_data %>%
mutate(prev_ssi = 0,
empl_healthcare = if_else(HIELIG == 2,1,0),
uninsured = 1,
assets.cash = 0,
assets.car1 = 0,
totalassets = 0,
disab.work.exp = 0)
#################
### 3) defines two distinct pre/post wage subsidy incomes at the household level
#################
# Define the CPS data with only the necessary variables for the pre and post treatment income values
CPS_wage_subset_notreatment  <- CPS_data %>%
mutate(ruleYear = 2023,
Year = 2023,
numadults = as.numeric(FAMSIZE - NCHILD),
numkids = as.numeric(NCHILD),
famsize = as.numeric(FAMSIZE),
income = as.numeric(if_else(as.numeric(FTOTVAL)>0,FTOTVAL,0)),
income1 = as.numeric(if_else(as.numeric(FTOTVAL)>0,FTOTVAL,0)),
income2 = as.numeric(if_else(as.numeric(FTOTVAL)>0,FTOTVAL,0)),
income3 = as.numeric(if_else(as.numeric(FTOTVAL)>0,FTOTVAL,0)),
income4 = as.numeric(if_else(as.numeric(FTOTVAL)>0,FTOTVAL,0)),
income5 = as.numeric(if_else(as.numeric(FTOTVAL)>0,FTOTVAL,0)),
income6 = as.numeric(if_else(as.numeric(FTOTVAL)>0,FTOTVAL,0)),
income_tm12 = as.numeric(if_else(as.numeric(FTOTVAL)>0,FTOTVAL,0)),
income.investment = 0,
income.gift = 0,
income.child_support = 0,
married = if_else(MARST ==1 | MARST == 2, 1, 0),
FilingStatus = 3) %>%
filter(income_increase>0 | income_increase_notaxtransfer>0) %>%
filter(RELATE==101) %>%
select(SERIAL,PERNUM,household_earnwt,EARNWT,ASECWTH,ASECWT,STATEFIP,ruleYear,Year,numadults,numkids,famsize,FilingStatus,
income,income1,income_tm12,income.investment,income.gift,income.child_support,uninsured,
totalassets,prev_ssi,empl_healthcare,assets.cash,assets.car1,disab.work.exp, married,
income2, income3, income4, income5, income6,
HOURWAGE,income_increase,income_increase_notaxtransfer) %>%
left_join(household_ownorrent) %>%
left_join(household_age) %>%
left_join(household_blind)  %>%
left_join(household_ssdi)  %>%
left_join(household_demo) %>%
left_join(household_disability)  %>%
left_join(household_minchildage) %>%
left_join(household_numkidsunder13) %>%
select(-own,-depx) %>%
as.data.frame()
CPS_wage_subset_treatment  <- CPS_data %>%
mutate(ruleYear = 2023,
Year = 2023,
numadults = as.numeric(FAMSIZE - NCHILD),
numkids = as.numeric(NCHILD),
famsize = as.numeric(FAMSIZE),
FTOTVAL_post = as.numeric(FTOTVAL) + income_increase,
income = as.numeric(if_else(FTOTVAL_post>0,FTOTVAL_post,0)),
income1 = as.numeric(if_else(FTOTVAL_post>0,FTOTVAL_post,0)),
income2 = as.numeric(if_else(FTOTVAL_post>0,FTOTVAL_post,0)),
income3 = as.numeric(if_else(FTOTVAL_post>0,FTOTVAL_post,0)),
income4 = as.numeric(if_else(FTOTVAL_post>0,FTOTVAL_post,0)),
income5 = as.numeric(if_else(FTOTVAL_post>0,FTOTVAL_post,0)),
income6 = as.numeric(if_else(FTOTVAL_post>0,FTOTVAL_post,0)),
income_tm12 = as.numeric(if_else(FTOTVAL_post>0,FTOTVAL_post,0)),
income.investment = 0,
income.gift = 0,
income.child_support = 0,
married = if_else(MARST ==1 | MARST == 2, 1, 0),
FilingStatus = 3) %>%
filter(income_increase>0 | income_increase_notaxtransfer>0) %>%
filter(RELATE==101) %>%
select(SERIAL,PERNUM,household_earnwt,EARNWT,ASECWTH,ASECWT,STATEFIP,ruleYear,Year,numadults,numkids,famsize,FilingStatus,
income,income1,income_tm12,income.investment,income.gift,income.child_support,uninsured,
totalassets,prev_ssi,empl_healthcare,assets.cash,assets.car1,disab.work.exp, married,
income2, income3, income4, income5, income6,
HOURWAGE,income_increase,income_increase_notaxtransfer) %>%
left_join(household_ownorrent) %>%
left_join(household_age) %>%
left_join(household_blind)  %>%
left_join(household_ssdi)  %>%
left_join(household_demo) %>%
left_join(household_disability)  %>%
left_join(household_minchildage) %>%
left_join(household_numkidsunder13) %>%
select(-own,-depx) %>%
as.data.frame()
CPS_wage_subset_notreatment <- CPS_wage_subset_notreatment %>% mutate(stateFIPS = as.numeric(STATEFIP)) %>% left_join(geo_data)
CPS_wage_subset_treatment <- CPS_wage_subset_treatment %>% mutate(stateFIPS = as.numeric(STATEFIP)) %>% left_join(geo_data)
sapply(CPS_wage_subset_notreatment, function(x) sum(is.na(x)))
sapply(CPS_wage_subset_treatment, function(x) sum(is.na(x)))
#################
### 4) runs Benefits Calculator for both the pre and post treatment incomes
#################
## Attach default expenses----
CPS_wage_subset_notreatment <-BenefitsCalculator.ALICEExpenses(CPS_wage_subset_notreatment)
# Apply other benefits block
CPS_wage_subset_notreatment<-BenefitsCalculator.OtherBenefits(CPS_wage_subset_notreatment, APPLY_TANF, APPLY_SSI, APPLY_SSDI) # OPTION TO END WITH APPLY_SSDI
# Apply child care block
CPS_wage_subset_notreatment<-BenefitsCalculator.Childcare(CPS_wage_subset_notreatment, APPLY_CHILDCARE, APPLY_HEADSTART, APPLY_PREK, APPLY_CCDF,APPLY_FATES) # OPTION TO END WITH APPLY_FATES
# Apply public health insurance block
CPS_wage_subset_notreatment<-BenefitsCalculator.Healthcare(CPS_wage_subset_notreatment, APPLY_HEALTHCARE, APPLY_MEDICAID_ADULT, APPLY_MEDICAID_CHILD, APPLY_ACA) # OPTION TO END WITH APPLY_ACA
# Apply food and housing block
CPS_wage_subset_notreatment<-BenefitsCalculator.FoodandHousing(CPS_wage_subset_notreatment, APPLY_SECTION8, APPLY_LIHEAP, APPLY_SNAP, APPLY_SLP, APPLY_WIC, APPLY_RAP, APPLY_FRSP) # OPTION TO END WITH APPLY_FRSP
# Apply taxes and tax credits block
CPS_wage_subset_notreatment<-BenefitsCalculator.TaxesandTaxCredits(CPS_wage_subset_notreatment, APPLY_EITC, APPLY_CTC, APPLY_CDCTC)
# Generate Additional Variables
CPS_wage_subset_notreatment<-function.createVars(CPS_wage_subset_notreatment)
## Attach default expenses----
CPS_wage_subset_treatment <-BenefitsCalculator.ALICEExpenses(CPS_wage_subset_treatment)
# Apply other benefits block
CPS_wage_subset_treatment<-BenefitsCalculator.OtherBenefits(CPS_wage_subset_treatment, APPLY_TANF, APPLY_SSI, APPLY_SSDI) # OPTION TO END WITH APPLY_SSDI
# Apply child care block
CPS_wage_subset_treatment<-BenefitsCalculator.Childcare(CPS_wage_subset_treatment, APPLY_CHILDCARE, APPLY_HEADSTART, APPLY_PREK, APPLY_CCDF,APPLY_FATES) # OPTION TO END WITH APPLY_FATES
# Apply public health insurance block
CPS_wage_subset_treatment<-BenefitsCalculator.Healthcare(CPS_wage_subset_treatment, APPLY_HEALTHCARE, APPLY_MEDICAID_ADULT, APPLY_MEDICAID_CHILD, APPLY_ACA) # OPTION TO END WITH APPLY_ACA
# Apply food and housing block
CPS_wage_subset_treatment<-BenefitsCalculator.FoodandHousing(CPS_wage_subset_treatment, APPLY_SECTION8, APPLY_LIHEAP, APPLY_SNAP, APPLY_SLP, APPLY_WIC, APPLY_RAP, APPLY_FRSP) # OPTION TO END WITH APPLY_FRSP
# Apply taxes and tax credits block
CPS_wage_subset_treatment<-BenefitsCalculator.TaxesandTaxCredits(CPS_wage_subset_treatment, APPLY_EITC, APPLY_CTC, APPLY_CDCTC)
# Generate Additional Variables
CPS_wage_subset_treatment<-function.createVars(CPS_wage_subset_treatment)
#################
### 5) estimate total cost of wage subsidy program as the change in qualified social safety net $s
#################
#ET: your YML file specifies more social safety net programs that you are examining below. If you don't want to include section8, headstart,early headstart CCDF, preK, WIC, and school lunches (slp) in your total of public assistance go into the YML file and change those 'APPLY_' values from true to false
## Select variables of interest and save results for the treated and control groups ----
Control_CPS <-CPS_wage_subset_notreatment %>%
mutate(net_benefit_receipt = total.transfers -
total.taxes)  %>%
select(household_earnwt,ASECWTH,SERIAL, income,famsize,numadults,
agePerson1,agePerson2,agePerson3,agePerson4,agePerson5,agePerson6,agePerson7,agePerson8,
numkids,
total.transfers,total.taxes,
net_benefit_receipt,
value.snap,
value.medicaid.adult,value.medicaid.child,value.aca,
value.ctc,value.eitc,value.cdctc) %>%
rename("income_no_sub" = "income") %>%
distinct()
treated_CPS <- CPS_wage_subset_treatment %>%
mutate(net_benefit_receipt_with_subsidy = total.transfers -
total.taxes +
income_increase + income_increase_notaxtransfer)  %>%
rename("value.snap_post" = "value.snap",
"value.medicaid.adult_post" = "value.medicaid.adult",
"value.medicaid.child_post" = "value.medicaid.child",
"value.aca_post" = "value.aca",
"value.ctc_post" = "value.ctc",
"value.eitc_post" = "value.eitc",
"value.cdctc_post" = "value.cdctc") %>%
select(household_earnwt,ASECWTH,SERIAL,income,famsize,numadults,numkids,
agePerson1,agePerson2,agePerson3,agePerson4,agePerson5,agePerson6,agePerson7,agePerson8,
net_benefit_receipt_with_subsidy,income_increase,income_increase_notaxtransfer,
value.snap_post,
value.medicaid.adult_post,value.medicaid.child_post,value.aca_post,
value.ctc_post,value.eitc_post,value.cdctc_post) %>%
distinct()
## calculate the change in total social safety net receipt - including the wage subsidy in the calculation
test <- left_join(treated_CPS,Control_CPS) %>%
mutate(value.snap_change = value.snap_post - value.snap,
value.medicaid.adult_change = value.medicaid.adult_post - value.medicaid.adult,
value.medicaid.child_change = value.medicaid.child_post - value.medicaid.child,
value.aca_change = value.aca_post - value.aca,
value.ctc_change = value.ctc_post - value.ctc,
value.eitc_change = value.eitc_post - value.eitc,
value.cdctc_change = value.cdctc_post - value.cdctc,
diff = net_benefit_receipt_with_subsidy - net_benefit_receipt,
diff_smart = if_else(net_benefit_receipt_with_subsidy - net_benefit_receipt<0,0,net_benefit_receipt_with_subsidy - net_benefit_receipt),
total_subsidy = income_increase + income_increase_notaxtransfer,
income_notrasnfer = income - income_increase,
pass_through = diff/total_subsidy) # Adjust so that someone would no have taken up the work if it pushed them over a cliff
#ET: instead of using the 'diff' variable i recommend using 'netfinancialresources' variable. The reason being that people's net financial resources change not only due to public assistance but also due to expenses because they can end up switching into different health insruance markets, subjecting them to different costs for health insruance as they gain/lose eligiblity. If you use program value for health insurance instead of net financial resoucces, which incorporates the difference in costs you will end up missing a lot of people who experience benefits cliffs
avg_pass_through <- weighted.mean(x = test$pass_through, w = test$ASECWTH, na.rm = TRUE)
pass_through <- test %>%
group_by(famsize,numkids) %>%
summarise(pass_through = weighted.mean(pass_through,
w = ASECWTH,
na.rm = TRUE))
cost_estimate <- Impacted_IDs %>% left_join(pass_through) %>% na.omit()
total_cost <- sum(cost_estimate$EARNWT*cost_estimate$total_income_increase)
total_cost_passthrough <- sum(cost_estimate$EARNWT*cost_estimate$total_income_increase*cost_estimate$pass_through)
adjusted_cost <- total_cost*avg_pass_through
total_workers <- sum(Impacted_IDs$EARNWT)
print(paste0("Total cost at a target wage of $",target_wage," is $",  prettyNum(total_cost,big.mark = ",", scientific = FALSE),
". We estimate that ", (1 - round(avg_pass_through,3))*100,"% of the cost is offset by reductions in the Social Safety Net and increased taxable income. ",
"This adjusts the cost down to $",prettyNum(adjusted_cost,big.mark = ",", scientific = FALSE),
". This comes to an average cost per targeted worker of $",prettyNum(round(adjusted_cost/total_workers,-1),big.mark = ",", scientific = FALSE)," for ",
prettyNum(total_workers,big.mark = ",", scientific = FALSE), " workers"))
View(test)
state_impact <- Impacted_IDs %>%
rename("stateFIPS" = "STATEFIP") %>%
left_join(geo_data) %>%
group_by(stateName) %>%
#ET: the target_age variable in the csv file is the same for every state, is it supposed to be?
summarise(target_wage = target_wage,
minwage = mean(minwage.old),
n = sum(EARNWT),
total = round(sum(EARNWT*total_income_increase)/1000000))
View(state_impact)
